import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import styles from '../styles/Home.module.css';
import { useRouter } from 'next/router';

import React, { useRef } from 'react';

import TypeWriter from 'typewriter-effect';

import { projects } from '../data/projects';
import { tools } from '../data/tools';

import { FaGithub } from 'react-icons/fa';
import { MdArrowForward, MdArrowOutward } from "react-icons/md";

import gsap from 'gsap';
import { ScrollTrigger } from 'gsap/dist/ScrollTrigger';
import { useGSAP } from '@gsap/react';

export default function Home() {
	const router = useRouter();

	const container = useRef();

	useGSAP(
		() => {
			gsap.registerPlugin(ScrollTrigger);

			// REVEAL ANIMATIONS, inspired by https://codepen.io/GreenSock/pen/pojzxwZ 
			function animateFrom(el, direction = 1) {
				var x = 0, y = direction * 100;

				if (el.classList.contains("reveal_fromLeft")) { x = -100; y = 0; }
				else if (el.classList.contains("reveal_fromRight")) { x = 100; y = 0; }
 
				el.style.transform = "translate(" + x + "px, " + y + "px)";
				el.style.opacity = "0";

				gsap.fromTo(
					el,
					{
						x: x,
						y: y,
						autoAlpha: 0
					},
					{
						x: 0,
						y: 0,
						autoAlpha: 1,
						duration: 1.5,
						ease: "expo",
						overwrite: "auto"
					}
				);
			}

			function hide(el) {
				gsap.set(el, { autoAlpha: 0 });
			}

			gsap.utils.toArray(".reveal").forEach(function (el) {
				hide(el); // assure that element is hidden when scrolling into view

				ScrollTrigger.create({
					trigger: el,
					onEnter: function () { animateFrom(el) },
					onEnterBack: function () { animateFrom(el, -1) },
					onLeave: function () { hide(el) } // hide element when scrolling out of view
				});
			});
			// TOOLS	
			ScrollTrigger.batch(".toolCard", {
				interval: 0.1,
				batchMax: 2,
				onEnter: batch => gsap.to(batch, { opacity: 1, y: 0, stagger: 0.15, overwrite: true }),
				onLeave: batch => gsap.set(batch, { opacity: 0, y: -100, overwrite: true }),
				onEnterBack: batch => gsap.to(batch, { opacity: 1, y: 0, stagger: 0.15, overwrite: true }),
				onLeaveBack: batch => gsap.set(batch, { opacity: 0, y: 100, overwrite: true }),
			});
		},
		{ scope: container }
	);

	return (
		<div className={styles.container}>
			<Head>
				<title>Jennifer's Portfolio</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<main className={`${styles.main} container`} ref={container}>

				<div id="home" className={`${styles.section} ${styles.section1} section section1`}>
					<h1 className={`reveal reveal_fromLeft ${styles.title}`}>
						Hi! I'm Jennifer.
					</h1>

					<div className={`reveal reveal_fromRight ${styles.description}`}>
						<span id={styles.preTypeWriterText}>Full-stack web developer and </span>
						<TypeWriter
							options={{
								strings: ['plant mom.', 'bookworm.', 'Illustrator lover.', 'playlist nerd.', 'aspiring CSS guru.', 'occasional artist.'],
								autoStart: true,
								loop: true,
								pauseFor: 2500,
								delay: 100,
								deleteSpeed: 70,
							}}
						/>
					</div>
				</div>
				<div id="about" className={`${styles.section} ${styles.section2} section section2`}>
					<div className={`reveal aboutCircle ${styles.aboutCircle}`}></div>

					<div className={`aboutText ${styles.aboutText}`}>
						<h2 className={`reveal reveal_fromLeft`}>About me</h2>
						<h4 className={`reveal`}>24 years old, from the deep forests of southern Sweden. Fresh from finishing a Masters degree in Media Technology, with a focus on web- and mobile development. I love a good programming challenge.</h4>

						{/* <h4>Favorite...</h4>
						<p><span>Framework:</span> React</p> */}
					</div>

				</div>

				<div id="tools" className={`${styles.section} ${styles.section3} section section3`}>
					<h2 className={`reveal reveal_fromLeft`}>Tools I've worked with</h2>
					<h4 className={`reveal`}>Some of the bits and bobs found in my creative toolbox:</h4>

					<div className={styles.toolsGrid}>
						{tools.map((tool, index) => (
							<div key={index} className={`toolCard ${styles.toolCard}`}>
								<div className={styles.toolIcon}>
									{tool.icon}
								</div>
								<p>{tool.name}</p>
							</div>
						))}
					</div>
				</div>

				<div id="projects" className={`${styles.section} ${styles.section4} section section4`}>
					<h2 className={`reveal`}>Projects</h2>

					<div className={styles.projectsGrid}>
						{projects.map((project, index) =>
							<div className={`${styles.projectCard}`} key={index}>
								<div className={`reveal ${styles.projectInfo}`}>
									<h3>{project.title}</h3>
									<p className={styles.projectDesc}>{project.subtitle}</p>
									<div className={styles.projectTags}>
										{project.tags.map((tag, i) =>
											<p key={i}>#{tag}</p>
										)}
									</div>
									<div className={styles.projectTools}>
										{project.tools.map((tool, index) =>
											<div key={tool + " " + index + 1} className={styles.projectToolIcon}>
												{tools.find((t) => t.key == tool).icon}
											</div>
										)}
									</div>

									<div className={styles.projectButtons}>
										{project.github ?
											<Link href={project.github} target="_blank">
												<div className={styles.githubButton}>
													<FaGithub className={styles.icon} />
												</div>
											</Link>
											: ""
										}
										{project.demo ?
											<Link href={project.demo} target="_blank">
												<span className={styles.projectButton}>
													<p>Live Demo</p>
													<MdArrowOutward className={styles.miniIcon} />
												</span>
											</Link>
											: ""
										}
										<button className={styles.projectButton}
											onClick={() => router.push({
												pathname: '/projects/[slug]',
												query: { slug: project.name }
											})}>
											<p>Tell me more</p>
											<MdArrowForward className={styles.miniIcon} />
										</button>
									</div>
								</div>

								<div className={`reveal reveal_fromRight ${styles.projectImg}`}>
									<Image
										src={`/projects/${project.name}/front.png`}
										alt={`Image from the ${project.title} project`}
										fill="true"
										style={{ objectFit: "contain", objectPosition: "center" }}
									/>
								</div>
							</div>
						)}
					</div>
				</div>
			</main>
		</div>
	)
}